[top]
components : Region 

[Region]
type : cell
dim : (21,21)
delay : transport
defaultDelayTime  : 100
border : wrapped

neighbors : Region(-1,-1) Region(-1,0) Region(-1,1)
neighbors : Region(0,-1)  Region(0,0)  Region(0,1)
neighbors : Region(1,-1)  Region(1,0)  Region(1,1)
initialvalue : 0
initialrowvalue : 4  000011100000000000000000011100000000000000000011100000000000000000011100000000000000000011100000000000000000011100000000000000000011100000000000000000011100000000000000

initialrowvalue : 5  000011100010000000000000011100010000000000000011100010000000000000011100010000000000000011100010000000000000011100010000000000000011100010000000000000011100010000000000

initialrowvalue : 6  000011100110000000000000011100110000000000000011100110000000000000011100110000000000000011100110000000000000011100110000000000000011100110000000000000011100110000000000

initialrowvalue : 10 000000000111000000000000000000111000000000000000000111000000000000000000111000000000000000000111000000000000000000111000000000000000000111000000000000000000111000000000

initialrowvalue : 11 000000000111000100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000

initialrowvalue : 12 000000000111001100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000000000000111000100000

initialrowvalue : 14 000000000000001110000000000000000001110000000000000000001110000000000000000001110000000000000000001110000000000000000001110000000000000000001110000000000000000001110000

initialrowvalue : 15 000000000000001110001000000000000001110001000000000000001110001000000000000001110001000000000000001110001000000000000001110001000000000000001110001000000000000001110001

initialrowvalue : 16 000000000000001110011000000000000001110011000000000000001110011000000000000001110011000000000000001110011000000000000001110011000000000000001110011000000000000001110011

localtransition : region-rule %RegionBehavior
StateVariables: settlement spread edge road corridor city disaster ecology
StateValues: 0 0.0 0 0 0 0 0 0
InitialVariablesValue: Region.stvalues

NeighborPorts: scenario1 scenario2 scenario3 scenario4

[debug]
% Calculate spread & edge
rule : { $spread } { $spread := 1; } 100 { (-1,0)>0 and (0,0)=0 and (1,0)=0 }
rule : { $spread } { $spread := 1; $edge := 1; } 100 { (0,0)=0 and (1,0)=1 }
rule : { $spread } { $spread := 1; } 100 { (0,-1)>0 and (0,0)=0 and (0,1)=0 }
rule : { $spread } { $spread := 1; $edge := 1; } 100 { (0,0)=0 and (0,1)=1 }
% Calculate edge
rule : { $edge } { $edge := 0; } 100 { (-1,0)>0 and (0,0)>0 and (1,0)=0 }
%rule : { $edge } { } 100 { (0,0)=0 and (1,0)=1 }
rule : { $edge } { $edge := 0; } 100 { (0,-1)>0 and (0,0)>0 and (0,1)=0 }
%rule : { $edge } { $edge := 1; } 100 { (0,0)=0 and (0,1)=1 }

[RegionBehavior]
% Calculate Gtotal
rule : { 
~out := 0;
~scenario1 := 1; %randInt(1); % + $spread + $edge + $road + $corridor + (0,0) + 
%(1,0) + (0,-1) + (-1,-1) + (1,1) + (-1,0) + (0,1) + (-1,1) + (1,-1); 
~scenario2 := 1; %randInt(1); % + $spread + $edge + $road + $corridor + $city + (0,0) + 
%(1,0) + (0,-1) + (-1,-1) + (1,1) + (-1,0) + (0,1) + (-1,1) + (1,-1); 
~scenario3 := 1; %randInt(1); % + $spread + $edge + $road + $corridor + $ecology + (0,0) + 
%(1,0) + (0,-1) + (-1,-1) + (1,1) + (-1,0) + (0,1) + (-1,1) + (1,-1); 
~scenario4 := 1; %randInt(1); % + $spread + $edge + $road + $corridor + $disaster + (0,0) + 
%(1,0) + (0,-1) + (-1,-1) + (1,1) + (-1,0) + (0,1) + (-1,1) + (1,-1); 
} 
100
{ $spread > 0 or $edge > 0 or $road > 0 or $corridor > 0 or $city > 0 or $ecology > 0 or $disaster > 0 }
rule: { ~out := 0; ~scenario1 := 0; ~scenario2 := 0; ~scenario3 := 0; ~scenario4 := 0; } 100 { t }

[region-rule]
rule : { ~scenario1 := 1; } 100 { (0,0)~scenario1 = 1 and (statecount(1, ~scenario1) = 3 or statecount(1, ~scenario1) =  4) }
rule : { ~scenario1 := 0; } 100 { (0,0)~scenario1 = 1 and (statecount(1, ~scenario1) < 3 or statecount(1, ~scenario1) > 4) }
rule : { ~scenario1 := 1; } 100 { (0,0)~scenario1 = 0 and statecount(1, ~scenario1) = 3 }
rule : { ~scenario1 := 0; } 100 { (0,0)~scenario1 = 0 and statecount(1, ~scenario1) != 3 }
